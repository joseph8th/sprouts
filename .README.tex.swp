\documentclass[11pt]{report}
\usepackage{graphicx}
\usepackage[margin=1.25in]{geometry}
%Gummi|063|=)
\title{UNM CS361 Fall 2013\\
\textbf{`Sprouts' Program}}
\author{Joseph Edwards}
\date{Dec. 5, 2013}
\begin{document}

\maketitle

\pagebreak

 

\vspace{3mm}

\textbf{Root directory}:
\begin{verbatim}
./sprouts/
\end{verbatim}

\textbf{Executable file}:
\begin{verbatim}
./sprouts/sprouts.py
\end{verbatim}

\textbf{Source code}:
\begin{verbatim}
./sprouts/sprouts/*.py
\end{verbatim}

\textbf{Command to execute (in Linux)}:

Make sure the executable file \textit{`sprouts.py'} has correct (+x or 755) permissions. 

Make sure Python 2.7 is installed (by default on most Linux flavors).

Note the use of quote marks (single or double) around the position string.

Uses `,' to separate seeds, `;' to separate boundaries, and `/' to separate faces.

\begin{verbatim}
$ ./sprouts.py "INIT_POSITION_STRING"
\end{verbatim}

\textbf{How it runs}:

The executable, `sprouts.py' is simply a Python-2.7 \textit{script} which calls a `main' function in the `sprouts' \textit{module}, defined in the `\_\_init.py\_\_' file. The `main' function instantiates an initial `Position' object, as well as a `SproutsGame' game engine, and `GameTree' object. A `Report' view is then printed.

\vspace{5mm}

\textbf{How to exit}:

If it times out, just type `Control-C'.
Otherwise it will exit with a simple report.

\vspace{5mm}

\textbf{Output format}:

\vspace{5mm}

\textbf{Understanding of Problem and Analysis}:

\vspace{5mm}

\textbf{Own Idea: Python implementation}:

I chose to write my `sprouts' program in Python because I love it, and it reads like pseudocode. In many ways it is perfectly suited to this course than Java. As an interpreted language it will run slower the first time, as the `*.pyc' files are compiled at runtime. 

A note on Python types: Python is a dynamically typed language, but one may import the `ctypes' module to generate importable C functions (or shared libs) from Python code. Due to time constraints, I haven't done this, so it will be slower than it could be.

A note on my source code syntax: because type declarations aren't required, I've taken up the habit of appending my variables with, ``\_TYPE", where ``TYPE" is the first letter of the implicit Python type. I.e., if the variable is a `tuple' object I often attach a ``\_t".

\end{document}
